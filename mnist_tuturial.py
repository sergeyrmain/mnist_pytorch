# -*- coding: utf-8 -*-
"""mnist_tuturial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kjwopDMqt-hPTHyfA9x5RzCVWAVKnZdc
"""

!pip install torch scikit-learn==0.20.* skorch

import numpy as np
from sklearn.datasets import fetch_openml
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import torch
from torch import nn
import torch.nn.functional as F
from skorch import NeuralNetClassifier

mnist=fetch_openml("mnist_784",cache=False)

mnist.data.shape

sqaredata=mnist.data.reshape(70000,28,28)

28*28

mnist.target

X=mnist.data.astype('float32')
Y=mnist.target.astype('int64')

"""#preprocessing"""

X=X/255.0

X.min(),X.max()

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=20)

X_train.shape,Y_train.shape

700000*0.8

"""#Building nural network with **pytorch**"""

data_X=X.reshape(-1,1,28,28)
data_X.shape

data_X_train,data_X_test,data_Y_train,data_Y_test=train_test_split(data_X,Y,test_size=0.2,random_state=20)
data_X_train.shape,data_Y_train.shape



"""#building the actual network"""

class My_network(nn.Module):
  def __init__(self,dropout=0.5):
    super(My_network,self).__init__()
    self.conv1=nn.Conv2d(1,32,kernel_size=3)
    self.conv2=nn.Conv2d(32,64,kernel_size=3)
    self.conv2_drop=nn.Dropout2d(dropout)
    self.fc1=nn.Linear(1600,100)
    self.fc2=nn.Linear(100,10)
    self.fc1_drop=nn.Dropout(dropout)
  

  def forward(self,X):
    X=torch.relu(F.max_pool2d(self.conv1(X),2))
    X=torch.relu(F.max_pool2d(self.conv2_drop(self.conv2(X)),2))

    X=X.view(-1,X.size(1)*X.size(2)*X.size(3))
    X=torch.relu(self.fc1_drop(self.fc1(X)))
    X=torch.softmax(self.fc2(X),dim=-1)
    return X

784*64

torch.manual_seed(0)
device='cuda'
net = NeuralNetClassifier(
    My_network,
    max_epochs=10,
    lr=0.1,
    # Shuffle training data on each epoch
    iterator_train__shuffle=True,
)
#my_cnn=NeuralNetClassifier(My_network,20,0.1,device)

net.fit(data_X_train,data_Y_train)

#prediction_cnn=net.predict(data_X_test,data_Y_test)
from sklearn.metrics import accuracy_score

Y_pred=net.predict(data_X_test)

print(Y_pred)

accuracy_score(data_Y_test,Y_pred)

error_vec=Y_pred!=data_Y_test

print(error_vec)

def plot_example(X,Y):
  for idx,(img,y) in enumerate(zip(X[:5].reshape(5,28,28),Y[:5])):
    plt.subplot(151+idx)
    plt.imshow(img)
    plt.xticks([])
    plt.yticks([])
    plt.title(y)

plot_example(data_X_test[error_vec],Y_pred[error_vec])